http {
  interface = "0.0.0.0"
  port = "8080"
}

kafka {

  schemareg.url = "http://0.0.0.0:8081"
  bootstrap.servers = "0.0.0.0:9092"
}

akka.kafka.consumer {

  poll-timeout = 50ms
  stop-timeout = 30s
  poll-interval = 50ms
  close-timeout = 20s
  commit-timeout = 15s
  wakeup-timeout = 10s
  use-dispatcher = "akka.kafka.default-dispatcher"

  kafka-clients {
    enable.auto.commit = false
  }
}

akka.actor {

  debug {
    receive = on
    # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
    autoreceive = on

    # enable DEBUG logging of actor lifecycle changes
    lifecycle = on

    # enable DEBUG logging of unhandled messages
    unhandled = on

    # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
    fsm = on

    # enable DEBUG logging of subscription changes on the eventStream
    event-stream = on
  }
}

akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  #Don't exit JVM on fatal error to capture thread/heap dump
  jvm-exit-on-fatal-error = off

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = on
}